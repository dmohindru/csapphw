16 bit "half-precision" floating point format
s eeeee nnnnnnnnnn
- ----- ----------
S   e       f
S = 1 bit
e = 5 bits
f = 10 bits
bais = 2^(5-1) - 1 = 15
------------------------------------------------------------------------
eg. no: 7/8 other way of think is binary 7 with floating point number
shifted 3 places to left 8 = 2^3 or 1/8 = 2^-3
7/8 = 111/2^3 = 0.111 = 1.11 * 2^-1
s = 0
M =  1 + (1/2 + 1/4) = 4 + 4/2 + 1/4 = 7/4
f = 1100000000
E = -1
e = bais + E = 15 - 1 = 14 = 0b01110
binary repsentation
0 01110 1100000000 = 0x3B00
- ----- ----------
s   e       f
numeric value = 0.875

------------------------------------------------------------------------
Description               Hex       M                        E       V         D
------------------------------------------------------------------------
-0                        8000      00 0000 0000 (0)        -14       -0      -0.0            --correct

Smallest Value > 2        4001      00 0000 0001(1025/1024)   1     1025/512  2.001953125    --correct

512                       6000      00 0000 0000 (1)          9      512      512.0          --correct

Largest denormalized      03FF      11 1111 1111(1023/1024)   -14   1023/2^24  0.000060976   --correct

-infinity                 FC00      00 0000 0000(0)           N/A     -inf       -inf         --correct

Number with Hex           3BB0      11 1011 0000(123/64)      -1     123/128    0.9609375     -- does not matches with solution book, but i believe it correct
reprentation 3BB0
------------------------------------------------------------------------
Solutions
================
A: -0
s = 1 (+ve)
e = 0 0000
E = e - bais = 0 - 14 = 14
f = 00 0000 0000
1 0 0000 00 0000 0000
- ------ ------------
================
B: Smallest Value > 2
First Binary represention of 2 in 16 bit format
2.00 = 0b10.0 * 2^0
Normalized: 1.00 * 2^1
E = 1
e = bais + E = 15 + 1 = 16 = 0b10000
f = 00 0000 0000
s = 0
0 1 0000 00 0000 0000
- ------ ------------
so binary represenation of number just greater than 2.0 would be
0 1 0000 00 0000 0001
- ------ ------------
E = e - bais = 16 - 15 = 1
M = 1.0000000001
V = 1.0000000001 * 2^1 = (1 + 1/1024) * 2 = 1025/1024 * 2 = 1025/512
D = (1 + 1/1024) * 2 = 1025/1024 * 2 = 1025/512 = 2.001953125
Hex = 3C01
===============
C: 512
512.0 = 0b1000000000.0
Normalized = 1.0000000000 * 2^9
E = 9
e = bais + E = 15 + 9 = 24 = 0b11000
M = 00 0000 0000
s = 0 (+ve)
0 1 1000 00 0000 0000
- ------ ------------
V = 1 * 2^9 = 512
D = 512.0
Hex = 6000
=================
D: Largest denormalized number
binary representation
0 0 0000 11 1111 1111
E = 1 - bais = 1 - 15 = -14
f = 11 1111 1111
V = 1023/1024 * 2^-14 = 1023/16777216
D = 0.000060976
Hex = 03FF
=================
E: -infinity
binary representaton
1 1 1111 00 0000 0000
- ------ ------------
E = N/A
hex = FC00
=================
Number with hex: 3BB0
binary representation
0 0 1110 11 1011 0000
- ------ ------------
E = e - bais = 14 - 15 = -1
M = 123/64
V = 123/64 * 2^-1 = 123/64 * 1/2 = 123/128
D = 0.9609375
=================
------------------------------------------------------------------------
Another example using 32 bit format for practice
7.875
binary representation
0 1000 0001 111 1100 0000 0000 0000 0000
another was of writing 7.875 = 7 + 0.875
= 7 + 7/8 = 63/8 = 111.111 
means: binary representation of 63 (0b111111) and divded by 8 means
moving floating point three position to left 2^3 = 8.
Now 111.111 can be written as 1.11111 * 2^2
Hence 
E = 2
e = bais + E = 127 + 2 = 129 = 0b1000 0001
M = 1.111 1100 0000 0000 0000 0000
f = 111 1100 0000 0000 0000 0000
s = 0 (+ve number)
encoding
0 1000 0001 111 1100 0000 0000 0000 0000
- --------- ----------------------------
s   e                 f
basic idea about convertion of floating point number
1. is write any decimal floating point number of form
   xx.xxx = numerator/denominator
   where denominator a number of some power of 2 e.g 2, 4, 8, 16, ......
2. convert numerator in binary form
3. move floating point number to left as per the power of two of
   denominator. e.g. for 2 move 1 point to left, for 4 = 2^2 move two
   point to left, for 8 = 2^3 move three point to left
4. Then write binary converted number in form x.xxxx * 2^E
5. Calculate e = bais + E
6. f = .xxxx
7. s = 0 for +ve, 1 for -ve
8. Hence format becomes s eeee eeee fff ffff ffff ffff ffff ffff
Nice article on conversion from decimal float to binary float
http://sandbox.mc.edu/~bennet/cs110/flt/dtof.html
