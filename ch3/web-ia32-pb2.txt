Practice Problem 2:

Figure 10(b) C code for call_proc
---------------------------------
int call_proc()
{
    int x2 = 2;
    short x3 = 3; char x4 = 4;
    proc(x2, &x2, x3, &x3, x4, &x4);
    return x2*(x3-x4);
}

Figure 10(b) shows C code for a function that calls the function proc (Figure 10(a)). When compiled
for IA32 using frame pointers, the following assembly code is generated:

int call_proc()

1 call_proc:
2   pushl     %ebp
3   movl      %esp, %ebp
4   subl      $40, %esp
5   movl      $2, -4(%ebp)
6   movw      $3, -6(%ebp)
7   movb      $4, -7(%ebp)
8   leal      -7(%ebp), %eax
9   movl      %eax, 20(%esp)
10  movl      $4, 16(%esp)
11  leal      -6(%ebp), %eax
12  movl      %eax, 12(%esp)
13  movl      $3, 8(%esp)
14  leal      -4(%ebp), %eax
15  movl      %eax, 4(%esp)
16  movl      $2, (%esp)
17  call      proc
18  movswl    -6(%ebp), %eax
19  movsbl    -7(%ebp), %edx
20  subl      %edx, %eax
21  imull     -4(%ebp), %eax
22  leave
23  ret

A. How much space is allocated on the stack for the local variables and argument build area?
Ans. 40 bytes


B. What local variables are generated and where are they stored within the stack frame, relative to %ebp?
Ans.
variable    size    offset
--------    ----    ------
x2            4       -4
x3            2       -6
x4            1       -7

C. Where is each of the six arguments stored on the stack?
argument    size    offset
--------    ----    ------
x2            4     %esp
&x2           4     %esp+4
x3            2     %esp+8
&x3           4     %esp+12
x4            1     %esp+16
&x4           4     %esp+20


D. Annotate the assembly code to describe the match between its instructions and the actions described by the C code.

1 call_proc:
2   pushl     %ebp              ; save old %ebp
3   movl      %esp, %ebp        ; save current %esp to %ebp
4   subl      $40, %esp         ; allocate 40 bytes on stack
5   movl      $2, -4(%ebp)      ; x2 = 2 (local variable)
6   movw      $3, -6(%ebp)      ; x3 = 3 (local variable)
7   movb      $4, -7(%ebp)      ; x4 = 4 (local variable)
8   leal      -7(%ebp), %eax    ; compute &x4
9   movl      %eax, 20(%esp)    ; store &x4 as argument 6
10  movl      $4, 16(%esp)      ; store 4 as argument 5
11  leal      -6(%ebp), %eax    ; compute &x3
12  movl      %eax, 12(%esp)    ; store &x3 as argument 4 
13  movl      $3, 8(%esp)       ; store 3 as argument 3
14  leal      -4(%ebp), %eax    ; compute &x2
15  movl      %eax, 4(%esp)     ; store &x2 as argument 2
16  movl      $2, (%esp)        ; store 2 as argument 1
17  call      proc              ; call proc
18  movswl    -6(%ebp), %eax    ; save x3 in %eax
19  movsbl    -7(%ebp), %edx    ; save x4 in %edx
20  subl      %edx, %eax        ; compute x3-x4 and store in %eax
21  imull     -4(%ebp), %eax    ; compute x2*(x3-x4) store in %eax as return value
22  leave                       ; restore %ebp and %esp
23  ret                         ; return
